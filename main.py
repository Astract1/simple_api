from fastapi import FastAPI, HTTPException, Query
from contextlib import asynccontextmanager
from pydantic import BaseModel, Field, field_validator
from typing import List, Optional
from motor.motor_asyncio import AsyncIOMotorClient
from pymongo import ASCENDING, DESCENDING
from bson import ObjectId
from datetime import datetime, date, timedelta
import logging
import random
import os

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuraci√≥n de MongoDB
MONGODB_URL = "mongodb+srv://diegojimenez2432_db_user:ZVgDJ4EYuti4LLQE@clusterjuan.mx2coel.mongodb.net/"
DATABASE_NAME = "biblioteca_db"

# Cliente MongoDB
client = None
db = None

# Funci√≥n para conectar a MongoDB
async def connect_to_mongo():
    global client, db
    try:
        client = AsyncIOMotorClient(MONGODB_URL)
        db = client[DATABASE_NAME]
        # Verificar conexi√≥n
        await client.admin.command('ping')
        logger.info("‚úÖ Conectado exitosamente a MongoDB")
    except Exception as e:
        logger.error(f"Error de conexi√≥n a MongoDB: {e}")
        raise HTTPException(status_code=500, detail=f"Error de conexi√≥n: {e}")

async def close_mongo_connection():
    global client
    if client:
        client.close()
        logger.info("üîå Desconectado de MongoDB")

    
# Funci√≥n helper para ObjectId
def str_to_objectid(id_str: str) -> ObjectId:
    if not id_str or not isinstance(id_str, str) or len(id_str) != 24:
        raise HTTPException(status_code=400, detail="ID inv√°lido: debe ser un ObjectId v√°lido de 24 caracteres hexadecimales")
    try:
        return ObjectId(id_str)
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"ID inv√°lido: {str(e)}")

# Funci√≥n para validar email
def validar_email(email: str) -> bool:
    import re
    patron = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(patron, email) is not None

# Funci√≥n para validar telefono
def validar_telefono(telefono: str) -> bool:
    if not telefono:
        return True  # Es opcional
    import re
    patron = r'^\+?[0-9\s\-\(\)]{7,15}$'
    return re.match(patron, telefono) is not None

# Modelos Pydantic - LIBROS
class Libro(BaseModel):
    titulo: str = Field(..., min_length=1, max_length=200, description="T√≠tulo del libro")
    autor: str = Field(..., min_length=1, max_length=100, description="Autor del libro")
    a√±o: int = Field(..., ge=1000, le=datetime.now().year, description="A√±o de publicaci√≥n")
    genero: Optional[str] = Field(None, max_length=50, description="G√©nero literario")
    isbn: Optional[str] = Field(None, max_length=13, description="ISBN del libro")
    descripcion: Optional[str] = Field(None, max_length=500, description="Descripci√≥n del libro")
    
    @field_validator('a√±o')
    @classmethod
    def validar_a√±o(cls, v):
        if v < 1000 or v > datetime.now().year:
            raise ValueError(f'El a√±o debe estar entre 1000 y {datetime.now().year}')
        return v

class LibroResponse(BaseModel):
    id: str = Field(alias="_id")
    titulo: str
    autor: str
    a√±o: int
    genero: Optional[str] = None
    isbn: Optional[str] = None
    descripcion: Optional[str] = None
    fecha_creacion: Optional[str] = None
    
    class Config:
        populate_by_name = True
        json_encoders = {ObjectId: str}

class LibroUpdate(BaseModel):
    titulo: Optional[str] = None
    autor: Optional[str] = None
    a√±o: Optional[int] = None
    genero: Optional[str] = None
    isbn: Optional[str] = None
    descripcion: Optional[str] = None
    
    @field_validator('titulo')
    @classmethod
    def validar_titulo(cls, v):
        if v is not None and v.strip() == "":
            raise ValueError('El t√≠tulo no puede estar vac√≠o')
        return v.strip() if v else v
    
    @field_validator('autor')
    @classmethod
    def validar_autor(cls, v):
        if v is not None and v.strip() == "":
            raise ValueError('El autor no puede estar vac√≠o')
        return v.strip() if v else v
    
    @field_validator('a√±o')
    @classmethod
    def validar_a√±o(cls, v):
        if v is not None and (v < 1000 or v > datetime.now().year):
            raise ValueError(f'El a√±o debe estar entre 1000 y {datetime.now().year}')
        return v
    
    @field_validator('genero')
    @classmethod
    def validar_genero(cls, v):
        return v.strip() if v else v
    
    @field_validator('isbn')
    @classmethod
    def validar_isbn(cls, v):
        return v.strip() if v else v
    
    @field_validator('descripcion')
    @classmethod
    def validar_descripcion(cls, v):
        return v.strip() if v else v

# Modelos Pydantic - USUARIOS
class Usuario(BaseModel):
    nombre: str = Field(..., min_length=2, max_length=100, description="Nombre completo")
    email: str = Field(..., max_length=150, description="Correo electr√≥nico")
    telefono: Optional[str] = Field(None, max_length=15, description="N√∫mero de tel√©fono")
    direccion: Optional[str] = Field(None, max_length=300, description="Direcci√≥n")
    tipo_usuario: str = Field("estudiante", description="Tipo de usuario (estudiante, profesor, administrador)")
    
    @field_validator('email')
    @classmethod
    def validar_email_format(cls, v):
        if not validar_email(v):
            raise ValueError('Formato de email inv√°lido')
        return v.lower().strip()
    
    @field_validator('telefono')
    @classmethod
    def validar_telefono_format(cls, v):
        if v and not validar_telefono(v):
            raise ValueError('Formato de tel√©fono inv√°lido')
        return v.strip() if v else None
    
    @field_validator('tipo_usuario')
    @classmethod
    def validar_tipo_usuario(cls, v):
        tipos_validos = ['estudiante', 'profesor', 'administrador']
        if v and v.strip() and v not in tipos_validos:
            raise ValueError(f'Tipo de usuario debe ser uno de: {tipos_validos}')
        return v if v and v.strip() else 'estudiante'  # Valor por defecto
    
    @field_validator('nombre')
    @classmethod
    def validar_nombre(cls, v):
        if not v.strip():
            raise ValueError('El nombre no puede estar vac√≠o')
        return v.strip()

class UsuarioResponse(BaseModel):
    id: str = Field(alias="_id")
    nombre: str
    email: str
    telefono: Optional[str] = None
    direccion: Optional[str] = None
    tipo_usuario: str = "estudiante"
    activo: bool = True
    fecha_registro: Optional[str] = None
    
    class Config:
        populate_by_name = True
        json_encoders = {ObjectId: str}

class UsuarioUpdate(BaseModel):
    nombre: Optional[str] = None
    email: Optional[str] = None
    telefono: Optional[str] = None
    direccion: Optional[str] = None
    tipo_usuario: Optional[str] = None
    activo: Optional[bool] = None
    
    @field_validator('nombre')
    @classmethod
    def validar_nombre(cls, v):
        # Solo validar si se proporciona un valor no vac√≠o
        if v is not None and v.strip() == "":
            raise ValueError('El nombre no puede estar vac√≠o')
        return v.strip() if v else v
    
    @field_validator('email')
    @classmethod
    def validar_email_format(cls, v):
        # Solo validar si se proporciona un valor no vac√≠o
        if v is not None and v.strip():
            if not validar_email(v.strip()):
                raise ValueError('Formato de email inv√°lido')
            return v.lower().strip()
        return v
    
    @field_validator('telefono')
    @classmethod
    def validar_telefono_format(cls, v):
        # Solo validar si se proporciona un valor no vac√≠o
        if v is not None and v.strip():
            if not validar_telefono(v.strip()):
                raise ValueError('Formato de tel√©fono inv√°lido')
            return v.strip()
        return v
    
    @field_validator('tipo_usuario')
    @classmethod
    def validar_tipo_usuario(cls, v):
        # Solo validar si se proporciona un valor no vac√≠o
        if v is not None and v.strip():
            tipos_validos = ['estudiante', 'profesor', 'administrador']
            if v.strip() not in tipos_validos:
                raise ValueError(f'Tipo de usuario debe ser uno de: {tipos_validos}')
            return v.strip()
        return v

# Modelos Pydantic - PR√âSTAMOS
class Prestamo(BaseModel):
    libro_id: str = Field(..., description="ID del libro a prestar")
    usuario_id: str = Field(..., description="ID del usuario")
    fecha_devolucion_esperada: str = Field(..., description="Fecha esperada de devoluci√≥n (YYYY-MM-DD)")

class PrestamoResponse(BaseModel):
    id: str = Field(alias="_id")
    libro_id: str
    usuario_id: str
    fecha_prestamo: str
    fecha_devolucion_esperada: str
    fecha_devolucion_real: Optional[str] = None
    estado: str
    libro_titulo: Optional[str] = None
    usuario_nombre: Optional[str] = None
    
    class Config:
        populate_by_name = True
        json_encoders = {ObjectId: str}

class PrestamoUpdate(BaseModel):
    fecha_devolucion_esperada: Optional[str] = None
    estado: Optional[str] = None

# Modelos Pydantic - RESE√ëAS
class Rese√±a(BaseModel):
    libro_id: str = Field(..., description="ID del libro a rese√±ar")
    usuario_id: str = Field(..., description="ID del usuario que hace la rese√±a")
    calificacion: int = Field(..., ge=1, le=5, description="Calificaci√≥n del 1 al 5")
    comentario: Optional[str] = Field(None, max_length=1000, description="Comentario sobre el libro")

class Rese√±aResponse(BaseModel):
    id: str = Field(alias="_id")
    libro_id: str
    usuario_id: str
    calificacion: int
    comentario: Optional[str] = None
    fecha_rese√±a: str
    libro_titulo: Optional[str] = None
    usuario_nombre: Optional[str] = None
    
    class Config:
        populate_by_name = True
        json_encoders = {ObjectId: str}

class Rese√±aUpdate(BaseModel):
    calificacion: Optional[int] = None
    comentario: Optional[str] = None
    
    @field_validator('calificacion')
    @classmethod
    def validar_calificacion(cls, v):
        if v is not None and (v < 1 or v > 5):
            raise ValueError('La calificaci√≥n debe estar entre 1 y 5')
        return v
    
    @field_validator('comentario')
    @classmethod
    def validar_comentario(cls, v):
        return v.strip() if v else v

# Modelos de respuesta paginada
class PaginatedResponse(BaseModel):
    libros: List[LibroResponse]
    total: int
    pagina: int
    por_pagina: int
    total_paginas: int

class PaginatedUsuariosResponse(BaseModel):
    usuarios: List[UsuarioResponse]
    total: int
    pagina: int
    por_pagina: int
    total_paginas: int

class PaginatedPrestamosResponse(BaseModel):
    prestamos: List[PrestamoResponse]
    total: int
    pagina: int
    por_pagina: int
    total_paginas: int

class PaginatedRese√±asResponse(BaseModel):
    rese√±as: List[Rese√±aResponse]
    total: int
    pagina: int
    por_pagina: int
    total_paginas: int

class Estadisticas(BaseModel):
    total_libros: int
    total_usuarios: int
    total_prestamos: int
    total_rese√±as: int
    libros_por_genero: dict
    libros_por_a√±o: dict
    usuarios_por_tipo: dict
    prestamos_activos: int
    prestamos_vencidos: int
    promedio_calificaciones: float
    autores_unicos: int
    generos_unicos: int

# Crear √≠ndices en las colecciones de MongoDB
async def create_indexes():
    try:
        # √çndices para la colecci√≥n libros
        await db.libros.create_index([("titulo", 1)])
        await db.libros.create_index([("autor", 1)])
        await db.libros.create_index([("genero", 1)])
        await db.libros.create_index([("a√±o", 1)])
        
        # √çndices para la colecci√≥n usuarios
        await db.usuarios.create_index([("email", 1)], unique=True)
        await db.usuarios.create_index([("tipo_usuario", 1)])
        await db.usuarios.create_index([("activo", 1)])
        
        # √çndices para la colecci√≥n prestamos
        await db.prestamos.create_index([("libro_id", 1)])
        await db.prestamos.create_index([("usuario_id", 1)])
        await db.prestamos.create_index([("estado", 1)])
        await db.prestamos.create_index([("fecha_devolucion_esperada", 1)])
        
        # √çndices para la colecci√≥n rese√±as
        await db.rese√±as.create_index([("libro_id", 1)])
        await db.rese√±as.create_index([("usuario_id", 1)])
        await db.rese√±as.create_index([("calificacion", 1)])
        await db.rese√±as.create_index([("libro_id", 1), ("usuario_id", 1)], unique=True)
        
        logger.info("‚úÖ √çndices creados exitosamente en MongoDB")
    except Exception as e:
        logger.error(f"Error al crear √≠ndices: {e}")

# Funci√≥n para poblar MongoDB con datos de prueba
async def poblar_datos_iniciales():
    try:
        # Verificar si ya hay datos
        libros_count = await db.libros.count_documents({})
        if libros_count > 0:
            logger.info("La base de datos ya contiene datos, omitiendo poblaci√≥n inicial")
            return
        
        logger.info("Poblando base de datos con datos iniciales...")
        
        # DATOS REALISTAS PARA LIBROS
        libros_data = [
            ("Cien a√±os de soledad", "Gabriel Garc√≠a M√°rquez", 1967, "Realismo m√°gico", "9780307474728", 
             "La √©pica historia de la familia Buend√≠a a lo largo de siete generaciones en el pueblo ficticio de Macondo."),
            ("1984", "George Orwell", 1949, "Distop√≠a", "9780451524935",
             "Una novela dist√≥pica que presenta un mundo totalitario donde el gobierno controla todos los aspectos de la vida."),
            ("El principito", "Antoine de Saint-Exup√©ry", 1943, "F√°bula", "9780156012195",
             "Una f√°bula po√©tica sobre un peque√±o pr√≠ncipe que viaja por diferentes planetas."),
            ("Don Quijote de la Mancha", "Miguel de Cervantes", 1605, "Cl√°sico", "9788420412146",
             "Las aventuras del ingenioso hidalgo Don Quijote y su fiel escudero Sancho Panza."),
            ("Rayuela", "Julio Cort√°zar", 1963, "Literatura experimental", "9788437604572",
             "Una novela experimental que puede leerse de m√∫ltiples maneras, siguiendo diferentes secuencias."),
        ]
        
        # Insertar libros en MongoDB
        libros_documentos = []
        for libro in libros_data:
            libro_doc = {
                "titulo": libro[0],
                "autor": libro[1],
                "a√±o": libro[2],
                "genero": libro[3],
                "isbn": libro[4],
                "descripcion": libro[5],
                "fecha_creacion": datetime.now()
            }
            libros_documentos.append(libro_doc)
        
        await db.libros.insert_many(libros_documentos)
        
        # DATOS REALISTAS PARA USUARIOS  
        usuarios_data = [
            ("Ana Mar√≠a Gonz√°lez", "ana.gonzalez@email.com", "+34612345678", "Calle Mayor 15, Madrid", "estudiante"),
            ("Carlos Eduardo Mart√≠nez", "carlos.martinez@universidad.edu", "+34687654321", "Avenida Libertad 42, Barcelona", "profesor"),
            ("Luc√≠a Fern√°ndez Silva", "lucia.fernandez@gmail.com", "+34654321987", "Plaza Espa√±a 8, Valencia", "estudiante"),
            ("Dr. Roberto Jim√©nez", "r.jimenez@biblioteca.edu", "+34623456789", "Calle Cervantes 23, Sevilla", "administrador"),
        ]
        
        # Insertar usuarios en MongoDB
        usuarios_documentos = []
        for usuario in usuarios_data:
            usuario_doc = {
                "nombre": usuario[0],
                "email": usuario[1],
                "telefono": usuario[2],
                "direccion": usuario[3],
                "tipo_usuario": usuario[4],
                "activo": True,
                "fecha_registro": datetime.now()
            }
            usuarios_documentos.append(usuario_doc)
        
        await db.usuarios.insert_many(usuarios_documentos)
        
        logger.info("‚úÖ Base de datos poblada exitosamente con:")
        logger.info(f"   üìö {len(libros_data)} libros")
        logger.info(f"   üë• {len(usuarios_data)} usuarios") 
        
    except Exception as e:
        logger.error(f"Error al poblar datos iniciales: {e}")
        raise

# Funci√≥n de lifespan para inicializar MongoDB
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    await connect_to_mongo()
    await create_indexes()
    await poblar_datos_iniciales()
    logger.info("üöÄ API iniciada - MongoDB conectado y datos poblados autom√°ticamente")
    yield
    # Shutdown
    await close_mongo_connection()

app = FastAPI(
    title="API Biblioteca Mejorada", 
    version="3.0.0",
    description="Sistema completo de biblioteca con usuarios, pr√©stamos y rese√±as",
    lifespan=lifespan
)

# Endpoints principales

@app.get("/", tags=["Informaci√≥n"])
def root():
    return {
        "mensaje": "API de Biblioteca Mejorada - FastAPI con MongoDB",
        "version": "3.0.0",
        "descripcion": "Sistema completo de biblioteca con usuarios, pr√©stamos y rese√±as",
        "endpoints": {
            "libros": "/libros/",
            "usuarios": "/usuarios/",
            "prestamos": "/prestamos/",
            "rese√±as": "/rese√±as/",
            "buscar_libros": "/libros/buscar/",
            "estadisticas_completas": "/estadisticas/",
            "documentacion": "/docs"
        }
    }

# =============================================================================
# ENDPOINTS LIBROS
# =============================================================================

# CREATE - Crear libro
@app.post("/libros/", response_model=LibroResponse, tags=["Libros"])
async def crear_libro(libro: Libro):
    try:
        # Validaciones adicionales
        if not libro.titulo.strip():
            raise HTTPException(status_code=400, detail="El t√≠tulo no puede estar vac√≠o")
        if not libro.autor.strip():
            raise HTTPException(status_code=400, detail="El autor no puede estar vac√≠o")
        
        # Verificar si ya existe un libro con el mismo t√≠tulo y autor
        libro_existente = await db.libros.find_one({
            "titulo": {"$regex": f"^{libro.titulo.strip()}$", "$options": "i"},
            "autor": {"$regex": f"^{libro.autor.strip()}$", "$options": "i"}
        })
        if libro_existente:
            raise HTTPException(status_code=400, detail="Ya existe un libro con el mismo t√≠tulo y autor")
        
        # Validar ISBN √∫nico si se proporciona
        if libro.isbn and libro.isbn.strip():
            isbn_existente = await db.libros.find_one({"isbn": libro.isbn.strip()})
            if isbn_existente:
                raise HTTPException(status_code=400, detail="Ya existe un libro con este ISBN")
        
        libro_doc = {
            "titulo": libro.titulo.strip(),
            "autor": libro.autor.strip(),
            "a√±o": libro.a√±o,
            "genero": libro.genero.strip() if libro.genero else None,
            "isbn": libro.isbn.strip() if libro.isbn else None,
            "descripcion": libro.descripcion.strip() if libro.descripcion else None,
            "fecha_creacion": datetime.now()
        }
        
        result = await db.libros.insert_one(libro_doc)
        libro_creado = await db.libros.find_one({"_id": result.inserted_id})
        
        logger.info(f"Libro creado: {libro.titulo} por {libro.autor}")
        
        libro_creado["_id"] = str(libro_creado["_id"])
        if libro_creado.get("fecha_creacion"):
            libro_creado["fecha_creacion"] = str(libro_creado["fecha_creacion"])
        
        return LibroResponse(**libro_creado)
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al crear libro: {e}")
        raise HTTPException(status_code=500, detail=f"Error al crear libro: {e}")

# READ - Obtener libros con paginaci√≥n y filtros
@app.get("/libros/", response_model=PaginatedResponse, tags=["Libros"])
async def obtener_libros(
    pagina: int = Query(1, ge=1, description="N√∫mero de p√°gina"),
    por_pagina: int = Query(10, ge=1, le=100, description="Libros por p√°gina"),
    ordenar_por: str = Query("_id", description="Campo para ordenar (_id, titulo, autor, a√±o, genero)"),
    orden: str = Query("asc", description="Orden (asc o desc)"),
    genero: Optional[str] = Query(None, description="Filtrar por g√©nero"),
    a√±o_min: Optional[int] = Query(None, ge=1000, description="A√±o m√≠nimo"),
    a√±o_max: Optional[int] = Query(None, le=datetime.now().year, description="A√±o m√°ximo")
):
    try:
        # Construir filtro
        filtro = {}
        
        if genero:
            filtro["genero"] = genero
        
        if a√±o_min:
            filtro.setdefault("a√±o", {})["$gte"] = a√±o_min
        
        if a√±o_max:
            filtro.setdefault("a√±o", {})["$lte"] = a√±o_max
        
        # Contar total
        total = await db.libros.count_documents(filtro)
        
        # Aplicar ordenamiento
        campos_validos = ['_id', 'titulo', 'autor', 'a√±o', 'genero']
        if ordenar_por not in campos_validos:
            ordenar_por = '_id'
        
        direccion = ASCENDING if orden.lower() == 'asc' else DESCENDING
        
        # Aplicar paginaci√≥n
        skip = (pagina - 1) * por_pagina
        
        cursor = db.libros.find(filtro).sort(ordenar_por, direccion).skip(skip).limit(por_pagina)
        libros_raw = await cursor.to_list(length=por_pagina)
        
        # Convertir ObjectId a string y formatear fechas
        libros = []
        for libro in libros_raw:
            libro["_id"] = str(libro["_id"])
            if libro.get("fecha_creacion"):
                libro["fecha_creacion"] = str(libro["fecha_creacion"])
            libros.append(LibroResponse(**libro))
        
        total_paginas = (total + por_pagina - 1) // por_pagina
        
        return PaginatedResponse(
            libros=libros,
            total=total,
            pagina=pagina,
            por_pagina=por_pagina,
            total_paginas=total_paginas
        )
    except Exception as e:
        logger.error(f"Error al obtener libros: {e}")
        raise HTTPException(status_code=500, detail=f"Error al obtener libros: {e}")

# READ - Obtener libro por ID
@app.get("/libros/{libro_id}", response_model=LibroResponse, tags=["Libros"])
async def obtener_libro(libro_id: str):
    try:
        object_id = str_to_objectid(libro_id)
        libro = await db.libros.find_one({"_id": object_id})
        
        if not libro:
            raise HTTPException(status_code=404, detail="Libro no encontrado")
        
        libro["_id"] = str(libro["_id"])
        if libro.get("fecha_creacion"):
            libro["fecha_creacion"] = str(libro["fecha_creacion"])
        
        return LibroResponse(**libro)
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al obtener libro: {e}")
        raise HTTPException(status_code=500, detail=f"Error al obtener libro: {e}")

# UPDATE - Editar libro por ID
@app.put("/libros/{libro_id}", response_model=LibroResponse, tags=["Libros"])
async def editar_libro(libro_id: str, libro_actualizado: LibroUpdate):
    try:
        # Validar ObjectId
        object_id = str_to_objectid(libro_id)
        
        # Verificar que el libro existe
        libro_existente = await db.libros.find_one({"_id": object_id})
        if not libro_existente:
            raise HTTPException(status_code=404, detail="Libro no encontrado")
        
        # Construir actualizaci√≥n solo con campos proporcionados (validados por Pydantic)
        actualizacion = {}
        
        if libro_actualizado.titulo is not None:
            # Verificar duplicado de t√≠tulo-autor si se actualiza el t√≠tulo
            titulo_autor_existente = await db.libros.find_one({
                "titulo": {"$regex": f"^{libro_actualizado.titulo.strip()}$", "$options": "i"},
                "autor": libro_existente["autor"],
                "_id": {"$ne": object_id}
            })
            if titulo_autor_existente:
                raise HTTPException(status_code=400, detail="Ya existe otro libro con este t√≠tulo del mismo autor")
            actualizacion["titulo"] = libro_actualizado.titulo
            
        if libro_actualizado.autor is not None:
            # Verificar duplicado de t√≠tulo-autor si se actualiza el autor
            titulo_autor_existente = await db.libros.find_one({
                "titulo": libro_existente["titulo"],
                "autor": {"$regex": f"^{libro_actualizado.autor.strip()}$", "$options": "i"},
                "_id": {"$ne": object_id}
            })
            if titulo_autor_existente:
                raise HTTPException(status_code=400, detail="Ya existe otro libro con este autor del mismo t√≠tulo")
            actualizacion["autor"] = libro_actualizado.autor
            
        if libro_actualizado.a√±o is not None:
            actualizacion["a√±o"] = libro_actualizado.a√±o
            
        if libro_actualizado.genero is not None:
            actualizacion["genero"] = libro_actualizado.genero
            
        if libro_actualizado.isbn is not None:
            # Verificar ISBN √∫nico si se proporciona
            if libro_actualizado.isbn and libro_actualizado.isbn.strip():
                isbn_existente = await db.libros.find_one({
                    "isbn": libro_actualizado.isbn.strip(),
                    "_id": {"$ne": object_id}
                })
                if isbn_existente:
                    raise HTTPException(status_code=400, detail="Ya existe otro libro con este ISBN")
            actualizacion["isbn"] = libro_actualizado.isbn
            
        if libro_actualizado.descripcion is not None:
            actualizacion["descripcion"] = libro_actualizado.descripcion
        
        if not actualizacion:
            raise HTTPException(status_code=400, detail="No se proporcionaron campos v√°lidos para actualizar")
        
        # Ejecutar actualizaci√≥n SOLO en el documento espec√≠fico
        logger.info(f"Actualizando libro con ID: {libro_id}, campos: {list(actualizacion.keys())}")
        
        resultado = await db.libros.update_one(
            {"_id": object_id},  # Filtro exacto por ObjectId
            {"$set": actualizacion}  # Solo actualizar los campos especificados
        )
        
        if resultado.matched_count == 0:
            raise HTTPException(status_code=404, detail="Libro no encontrado para actualizar")
        
        if resultado.modified_count == 0:
            raise HTTPException(status_code=400, detail="No se realizaron cambios en el libro")
        
        # Obtener el libro actualizado
        libro_actualizado_result = await db.libros.find_one({"_id": object_id})
        
        if not libro_actualizado_result:
            raise HTTPException(status_code=500, detail="Error al obtener el libro actualizado")
        
        logger.info(f"Libro actualizado exitosamente: ID {libro_id}")
        
        # Convertir ObjectId a string
        libro_actualizado_result["_id"] = str(libro_actualizado_result["_id"])
        if libro_actualizado_result.get("fecha_creacion"):
            libro_actualizado_result["fecha_creacion"] = str(libro_actualizado_result["fecha_creacion"])
        
        return LibroResponse(**libro_actualizado_result)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al actualizar libro: {e}")
        raise HTTPException(status_code=500, detail=f"Error al actualizar libro: {e}")

# DELETE - Eliminar libro por ID
@app.delete("/libros/{libro_id}", tags=["Libros"])
async def eliminar_libro(libro_id: str):
    try:
        object_id = str_to_objectid(libro_id)
        
        # Verificar que el libro existe
        libro_existente = await db.libros.find_one({"_id": object_id})
        if not libro_existente:
            raise HTTPException(status_code=404, detail="Libro no encontrado")
        
        # Verificar si el libro tiene pr√©stamos activos
        prestamos_activos = await db.prestamos.count_documents({"libro_id": libro_id, "estado": "activo"})
        
        if prestamos_activos > 0:
            raise HTTPException(
                status_code=400, 
                detail=f"No se puede eliminar el libro porque tiene {prestamos_activos} pr√©stamo(s) activo(s)"
            )
        
        # Eliminar el libro
        await db.libros.delete_one({"_id": object_id})
        # Eliminar pr√©stamos y rese√±as asociadas
        await db.prestamos.delete_many({"libro_id": libro_id})
        await db.rese√±as.delete_many({"libro_id": libro_id})
        
        logger.info(f"Libro eliminado: '{libro_existente['titulo']}' por {libro_existente['autor']} (ID: {libro_id})")
        
        return {
            "mensaje": "Libro eliminado exitosamente",
            "libro_eliminado": {
                "id": libro_id,
                "titulo": libro_existente["titulo"],
                "autor": libro_existente["autor"]
            }
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al eliminar libro: {e}")
        raise HTTPException(status_code=500, detail=f"Error al eliminar libro: {e}")

# =============================================================================
# ENDPOINTS USUARIOS
# =============================================================================

# CREATE - Crear usuario
@app.post("/usuarios/", response_model=UsuarioResponse, tags=["Usuarios"])
async def crear_usuario(usuario: Usuario):
    try:
        # Verificar que el email no existe (sin distinguir may√∫sculas/min√∫sculas)
        usuario_existente = await db.usuarios.find_one({"email": usuario.email.lower()})
        if usuario_existente:
            raise HTTPException(status_code=400, detail="El email ya est√° registrado")
        
        # Validar tipo de usuario
        tipos_validos = ['estudiante', 'profesor', 'administrador']
        if usuario.tipo_usuario not in tipos_validos:
            raise HTTPException(status_code=400, detail=f"Tipo de usuario inv√°lido. Tipos v√°lidos: {tipos_validos}")
        
        usuario_doc = {
            "nombre": usuario.nombre.strip(),
            "email": usuario.email.lower().strip(),
            "telefono": usuario.telefono.strip() if usuario.telefono else None,
            "direccion": usuario.direccion.strip() if usuario.direccion else None,
            "tipo_usuario": usuario.tipo_usuario,
            "activo": True,
            "fecha_registro": datetime.now()
        }
        
        result = await db.usuarios.insert_one(usuario_doc)
        usuario_creado = await db.usuarios.find_one({"_id": result.inserted_id})
        
        logger.info(f"Usuario creado: {usuario.nombre} ({usuario.email})")
        
        usuario_creado["_id"] = str(usuario_creado["_id"])
        if usuario_creado.get("fecha_registro"):
            usuario_creado["fecha_registro"] = str(usuario_creado["fecha_registro"])
        
        return UsuarioResponse(**usuario_creado)
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al crear usuario: {e}")
        raise HTTPException(status_code=500, detail=f"Error al crear usuario: {e}")

# READ - Obtener usuarios con paginaci√≥n y filtros
@app.get("/usuarios/", response_model=PaginatedUsuariosResponse, tags=["Usuarios"])
async def obtener_usuarios(
    pagina: int = Query(1, ge=1, description="N√∫mero de p√°gina"),
    por_pagina: int = Query(10, ge=1, le=100, description="Usuarios por p√°gina"),
    tipo_usuario: Optional[str] = Query(None, description="Filtrar por tipo de usuario"),
    activo: Optional[bool] = Query(None, description="Filtrar por estado activo")
):
    try:
        # Construir filtro
        filtro = {}
        
        if tipo_usuario:
            tipos_validos = ['estudiante', 'profesor', 'administrador']
            if tipo_usuario not in tipos_validos:
                raise HTTPException(status_code=400, detail=f"Tipo de usuario inv√°lido. Tipos v√°lidos: {tipos_validos}")
            filtro["tipo_usuario"] = tipo_usuario
        
        if activo is not None:
            filtro["activo"] = activo
        
        # Contar total
        total = await db.usuarios.count_documents(filtro)
        
        # Aplicar paginaci√≥n
        skip = (pagina - 1) * por_pagina
        
        cursor = db.usuarios.find(filtro).sort("fecha_registro", DESCENDING).skip(skip).limit(por_pagina)
        usuarios_raw = await cursor.to_list(length=por_pagina)
        
        # Convertir ObjectId a string y formatear fechas
        usuarios = []
        for usuario in usuarios_raw:
            usuario["_id"] = str(usuario["_id"])
            if usuario.get("fecha_registro"):
                usuario["fecha_registro"] = str(usuario["fecha_registro"])
            usuarios.append(UsuarioResponse(**usuario))
        
        total_paginas = (total + por_pagina - 1) // por_pagina
        
        return PaginatedUsuariosResponse(
            usuarios=usuarios,
            total=total,
            pagina=pagina,
            por_pagina=por_pagina,
            total_paginas=total_paginas
        )
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al obtener usuarios: {e}")
        raise HTTPException(status_code=500, detail=f"Error al obtener usuarios: {e}")

# READ - Obtener usuario por ID
@app.get("/usuarios/{usuario_id}", response_model=UsuarioResponse, tags=["Usuarios"])
async def obtener_usuario(usuario_id: str):
    try:
        object_id = str_to_objectid(usuario_id)
        usuario = await db.usuarios.find_one({"_id": object_id})
        
        if not usuario:
            raise HTTPException(status_code=404, detail="Usuario no encontrado")
        
        usuario["_id"] = str(usuario["_id"])
        if usuario.get("fecha_registro"):
            usuario["fecha_registro"] = str(usuario["fecha_registro"])
        
        return UsuarioResponse(**usuario)
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al obtener usuario: {e}")
        raise HTTPException(status_code=500, detail=f"Error al obtener usuario: {e}")

# UPDATE - Editar usuario por ID
@app.put("/usuarios/{usuario_id}", response_model=UsuarioResponse, tags=["Usuarios"])
async def editar_usuario(usuario_id: str, usuario_actualizado: UsuarioUpdate):
    try:
        # Validar ObjectId
        object_id = str_to_objectid(usuario_id)
        
        # Verificar que el usuario existe
        usuario_existente = await db.usuarios.find_one({"_id": object_id})
        if not usuario_existente:
            raise HTTPException(status_code=404, detail="Usuario no encontrado")
        
        # Construir actualizaci√≥n solo con campos proporcionados (validados por Pydantic)
        actualizacion = {}
        
        if usuario_actualizado.nombre is not None:
            actualizacion["nombre"] = usuario_actualizado.nombre
            
        if usuario_actualizado.email is not None:
            # Verificaci√≥n adicional: email no debe existir en otro usuario
            if usuario_actualizado.email:  # Solo si no es cadena vac√≠a
                email_existente = await db.usuarios.find_one({
                    "email": usuario_actualizado.email,
                    "_id": {"$ne": object_id}
                })
                if email_existente:
                    raise HTTPException(status_code=400, detail="El email ya est√° registrado por otro usuario")
            actualizacion["email"] = usuario_actualizado.email
            
        if usuario_actualizado.telefono is not None:
            actualizacion["telefono"] = usuario_actualizado.telefono
            
        if usuario_actualizado.direccion is not None:
            actualizacion["direccion"] = usuario_actualizado.direccion
            
        if usuario_actualizado.tipo_usuario is not None:
            actualizacion["tipo_usuario"] = usuario_actualizado.tipo_usuario
            
        if usuario_actualizado.activo is not None:
            actualizacion["activo"] = usuario_actualizado.activo
        
        if not actualizacion:
            raise HTTPException(status_code=400, detail="No se proporcionaron campos v√°lidos para actualizar")
        
        # Ejecutar actualizaci√≥n SOLO en el documento espec√≠fico
        logger.info(f"Actualizando usuario con ID: {usuario_id}, campos: {list(actualizacion.keys())}")
        
        resultado = await db.usuarios.update_one(
            {"_id": object_id},
            {"$set": actualizacion}
        )
        
        if resultado.matched_count == 0:
            raise HTTPException(status_code=404, detail="Usuario no encontrado para actualizar")
            
        if resultado.modified_count == 0:
            raise HTTPException(status_code=400, detail="No se realizaron cambios en el usuario")
        
        # Obtener el usuario actualizado
        usuario_actualizado_result = await db.usuarios.find_one({"_id": object_id})
        
        logger.info(f"Usuario actualizado exitosamente: ID {usuario_id}")
        
        usuario_actualizado_result["_id"] = str(usuario_actualizado_result["_id"])
        if usuario_actualizado_result.get("fecha_registro"):
            usuario_actualizado_result["fecha_registro"] = str(usuario_actualizado_result["fecha_registro"])
        
        return UsuarioResponse(**usuario_actualizado_result)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al actualizar usuario: {e}")
        raise HTTPException(status_code=500, detail=f"Error al actualizar usuario: {e}")

# DELETE - Eliminar usuario por ID
@app.delete("/usuarios/{usuario_id}", tags=["Usuarios"])
async def eliminar_usuario(usuario_id: str):
    try:
        object_id = str_to_objectid(usuario_id)
        
        # Verificar que el usuario existe
        usuario_existente = await db.usuarios.find_one({"_id": object_id})
        if not usuario_existente:
            raise HTTPException(status_code=404, detail="Usuario no encontrado")
        
        # Verificar si el usuario tiene pr√©stamos activos
        prestamos_activos = await db.prestamos.count_documents({"usuario_id": usuario_id, "estado": "activo"})
        
        if prestamos_activos > 0:
            raise HTTPException(
                status_code=400, 
                detail=f"No se puede eliminar el usuario porque tiene {prestamos_activos} pr√©stamo(s) activo(s)"
            )
        
        # Eliminar el usuario
        await db.usuarios.delete_one({"_id": object_id})
        # Eliminar pr√©stamos y rese√±as asociadas
        await db.prestamos.delete_many({"usuario_id": usuario_id})
        await db.rese√±as.delete_many({"usuario_id": usuario_id})
        
        logger.info(f"Usuario eliminado: '{usuario_existente['nombre']}' ({usuario_existente['email']}) (ID: {usuario_id})")
        
        return {
            "mensaje": "Usuario eliminado exitosamente",
            "usuario_eliminado": {
                "id": usuario_id,
                "nombre": usuario_existente["nombre"],
                "email": usuario_existente["email"]
            }
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al eliminar usuario: {e}")
        raise HTTPException(status_code=500, detail=f"Error al eliminar usuario: {e}")

# =============================================================================
# ENDPOINTS PR√âSTAMOS
# =============================================================================

# CREATE - Crear pr√©stamo
@app.post("/prestamos/", response_model=PrestamoResponse, tags=["Pr√©stamos"])
async def crear_prestamo(prestamo: Prestamo):
    try:
        # Validar que el libro existe
        libro_object_id = str_to_objectid(prestamo.libro_id)
        libro = await db.libros.find_one({"_id": libro_object_id})
        if not libro:
            raise HTTPException(status_code=404, detail="Libro no encontrado")
        
        # Validar que el usuario existe
        usuario_object_id = str_to_objectid(prestamo.usuario_id)
        usuario = await db.usuarios.find_one({"_id": usuario_object_id})
        if not usuario:
            raise HTTPException(status_code=404, detail="Usuario no encontrado")
        
        # Verificar que el usuario est√© activo
        if not usuario.get("activo", True):
            raise HTTPException(status_code=400, detail="El usuario est√° inactivo y no puede realizar pr√©stamos")
        
        # Verificar que el libro no est√© ya prestado
        prestamo_activo = await db.prestamos.find_one({"libro_id": prestamo.libro_id, "estado": "activo"})
        if prestamo_activo:
            raise HTTPException(status_code=400, detail="El libro ya est√° prestado")
        
        # Verificar que el usuario no tenga m√°s de 3 pr√©stamos activos
        prestamos_usuario = await db.prestamos.count_documents({
            "usuario_id": prestamo.usuario_id, 
            "estado": "activo"
        })
        if prestamos_usuario >= 3:
            raise HTTPException(status_code=400, detail="El usuario ya tiene el m√°ximo de 3 pr√©stamos activos")
        
        # Verificar que el usuario no tenga pr√©stamos vencidos
        prestamos_vencidos = await db.prestamos.count_documents({
            "usuario_id": prestamo.usuario_id,
            "estado": "activo",
            "fecha_devolucion_esperada": {"$lt": date.today().isoformat()}
        })
        if prestamos_vencidos > 0:
            raise HTTPException(status_code=400, detail="El usuario tiene pr√©stamos vencidos y no puede realizar nuevos pr√©stamos")
        
        # Validar fecha de devoluci√≥n
        try:
            fecha_devolucion = datetime.strptime(prestamo.fecha_devolucion_esperada, "%Y-%m-%d").date()
            if fecha_devolucion <= date.today():
                raise HTTPException(status_code=400, detail="La fecha de devoluci√≥n debe ser futura")
        except ValueError:
            raise HTTPException(status_code=400, detail="Formato de fecha inv√°lido. Use YYYY-MM-DD")
        
        prestamo_doc = {
            "libro_id": prestamo.libro_id,
            "usuario_id": prestamo.usuario_id,
            "fecha_prestamo": datetime.now(),
            "fecha_devolucion_esperada": prestamo.fecha_devolucion_esperada,
            "fecha_devolucion_real": None,
            "estado": "activo"
        }
        
        result = await db.prestamos.insert_one(prestamo_doc)
        
        # Obtener el pr√©stamo creado con informaci√≥n relacionada
        prestamo_creado = await db.prestamos.find_one({"_id": result.inserted_id})
        
        logger.info(f"Pr√©stamo creado: Libro '{libro['titulo']}' para usuario '{usuario['nombre']}'")
        
        prestamo_creado["_id"] = str(prestamo_creado["_id"])
        prestamo_creado["fecha_prestamo"] = str(prestamo_creado["fecha_prestamo"])
        prestamo_creado["libro_titulo"] = libro["titulo"]
        prestamo_creado["usuario_nombre"] = usuario["nombre"]
        
        return PrestamoResponse(**prestamo_creado)
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al crear pr√©stamo: {e}")
        raise HTTPException(status_code=500, detail=f"Error al crear pr√©stamo: {e}")

# READ - Obtener pr√©stamos con paginaci√≥n
@app.get("/prestamos/", response_model=PaginatedPrestamosResponse, tags=["Pr√©stamos"])
async def obtener_prestamos(
    pagina: int = Query(1, ge=1, description="N√∫mero de p√°gina"),
    por_pagina: int = Query(10, ge=1, le=100, description="Pr√©stamos por p√°gina"),
    estado: Optional[str] = Query(None, description="Filtrar por estado (activo, devuelto, vencido)"),
):
    try:
        # Construir filtro
        filtro = {}
        
        if estado:
            estados_validos = ['activo', 'devuelto', 'vencido']
            if estado not in estados_validos:
                raise HTTPException(status_code=400, detail=f"Estado inv√°lido. Estados v√°lidos: {estados_validos}")
            filtro["estado"] = estado
        
        # Contar total
        total = await db.prestamos.count_documents(filtro)
        
        # Aplicar paginaci√≥n
        skip = (pagina - 1) * por_pagina
        
        cursor = db.prestamos.find(filtro).sort("fecha_prestamo", DESCENDING).skip(skip).limit(por_pagina)
        prestamos_raw = await cursor.to_list(length=por_pagina)
        
        # Obtener informaci√≥n relacionada y formatear fechas
        prestamos = []
        for prestamo in prestamos_raw:
            # Obtener informaci√≥n del libro
            libro_object_id = str_to_objectid(prestamo["libro_id"])
            libro = await db.libros.find_one({"_id": libro_object_id})
            
            # Obtener informaci√≥n del usuario
            usuario_object_id = str_to_objectid(prestamo["usuario_id"])
            usuario = await db.usuarios.find_one({"_id": usuario_object_id})
            
            prestamo["_id"] = str(prestamo["_id"])
            prestamo["fecha_prestamo"] = str(prestamo["fecha_prestamo"])
            prestamo["fecha_devolucion_real"] = str(prestamo["fecha_devolucion_real"]) if prestamo.get("fecha_devolucion_real") else None
            prestamo["libro_titulo"] = libro["titulo"] if libro else "Libro eliminado"
            prestamo["usuario_nombre"] = usuario["nombre"] if usuario else "Usuario eliminado"
            
            prestamos.append(PrestamoResponse(**prestamo))
        
        total_paginas = (total + por_pagina - 1) // por_pagina
        
        return PaginatedPrestamosResponse(
            prestamos=prestamos,
            total=total,
            pagina=pagina,
            por_pagina=por_pagina,
            total_paginas=total_paginas
        )
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al obtener pr√©stamos: {e}")
        raise HTTPException(status_code=500, detail=f"Error al obtener pr√©stamos: {e}")

# UPDATE - Marcar pr√©stamo como devuelto
@app.put("/prestamos/{prestamo_id}/devolver", response_model=PrestamoResponse, tags=["Pr√©stamos"])
async def devolver_prestamo(prestamo_id: str):
    try:
        object_id = str_to_objectid(prestamo_id)
        
        # Verificar que el pr√©stamo existe y est√° activo
        prestamo_existente = await db.prestamos.find_one({"_id": object_id})
        if not prestamo_existente:
            raise HTTPException(status_code=404, detail="Pr√©stamo no encontrado")
        
        if prestamo_existente["estado"] != "activo":
            raise HTTPException(status_code=400, detail="Solo se pueden devolver pr√©stamos activos")
        
        # Actualizar el pr√©stamo
        resultado = await db.prestamos.update_one(
            {"_id": object_id},
            {
                "$set": {
                    "estado": "devuelto",
                    "fecha_devolucion_real": datetime.now().date().isoformat()
                }
            }
        )
        
        if resultado.modified_count == 0:
            raise HTTPException(status_code=500, detail="Error al devolver el pr√©stamo")
        
        # Obtener el pr√©stamo actualizado
        prestamo_actualizado = await db.prestamos.find_one({"_id": object_id})
        
        # Obtener informaci√≥n relacionada
        libro_object_id = str_to_objectid(prestamo_actualizado["libro_id"])
        libro = await db.libros.find_one({"_id": libro_object_id})
        
        usuario_object_id = str_to_objectid(prestamo_actualizado["usuario_id"])
        usuario = await db.usuarios.find_one({"_id": usuario_object_id})
        
        logger.info(f"Pr√©stamo devuelto: ID {prestamo_id}")
        
        prestamo_actualizado["_id"] = str(prestamo_actualizado["_id"])
        prestamo_actualizado["fecha_prestamo"] = str(prestamo_actualizado["fecha_prestamo"])
        prestamo_actualizado["libro_titulo"] = libro["titulo"] if libro else "Libro eliminado"
        prestamo_actualizado["usuario_nombre"] = usuario["nombre"] if usuario else "Usuario eliminado"
        
        return PrestamoResponse(**prestamo_actualizado)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al devolver pr√©stamo: {e}")
        raise HTTPException(status_code=500, detail=f"Error al devolver pr√©stamo: {e}")

# =============================================================================
# ENDPOINTS RESE√ëAS
# =============================================================================

# CREATE - Crear rese√±a
@app.post("/rese√±as/", response_model=Rese√±aResponse, tags=["Rese√±as"])
async def crear_rese√±a(rese√±a: Rese√±a):
    try:
        # Validar que el libro existe
        libro_object_id = str_to_objectid(rese√±a.libro_id)
        libro = await db.libros.find_one({"_id": libro_object_id})
        if not libro:
            raise HTTPException(status_code=404, detail="Libro no encontrado")
        
        # Validar que el usuario existe
        usuario_object_id = str_to_objectid(rese√±a.usuario_id)
        usuario = await db.usuarios.find_one({"_id": usuario_object_id})
        if not usuario:
            raise HTTPException(status_code=404, detail="Usuario no encontrado")
        
        # Verificar que el usuario no haya rese√±ado ya este libro
        rese√±a_existente = await db.rese√±as.find_one({
            "libro_id": rese√±a.libro_id,
            "usuario_id": rese√±a.usuario_id
        })
        if rese√±a_existente:
            raise HTTPException(status_code=400, detail="El usuario ya ha rese√±ado este libro")
        
        # Verificar que el usuario est√© activo
        if not usuario.get("activo", True):
            raise HTTPException(status_code=400, detail="El usuario est√° inactivo y no puede crear rese√±as")
        
        rese√±a_doc = {
            "libro_id": rese√±a.libro_id,
            "usuario_id": rese√±a.usuario_id,
            "calificacion": rese√±a.calificacion,
            "comentario": rese√±a.comentario.strip() if rese√±a.comentario else None,
            "fecha_rese√±a": datetime.now()
        }
        
        result = await db.rese√±as.insert_one(rese√±a_doc)
        rese√±a_creada = await db.rese√±as.find_one({"_id": result.inserted_id})
        
        logger.info(f"Rese√±a creada: {rese√±a.calificacion}/5 para '{libro['titulo']}' por '{usuario['nombre']}'")
        
        rese√±a_creada["_id"] = str(rese√±a_creada["_id"])
        rese√±a_creada["fecha_rese√±a"] = str(rese√±a_creada["fecha_rese√±a"])
        rese√±a_creada["libro_titulo"] = libro["titulo"]
        rese√±a_creada["usuario_nombre"] = usuario["nombre"]
        
        return Rese√±aResponse(**rese√±a_creada)
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al crear rese√±a: {e}")
        raise HTTPException(status_code=500, detail=f"Error al crear rese√±a: {e}")

# READ - Obtener rese√±as con paginaci√≥n
@app.get("/rese√±as/", response_model=PaginatedRese√±asResponse, tags=["Rese√±as"])
async def obtener_rese√±as(
    pagina: int = Query(1, ge=1, description="N√∫mero de p√°gina"),
    por_pagina: int = Query(10, ge=1, le=100, description="Rese√±as por p√°gina"),
    libro_id: Optional[str] = Query(None, description="Filtrar por libro"),
):
    try:
        # Construir filtro
        filtro = {}
        
        if libro_id:
            # Validar que el libro_id es v√°lido
            str_to_objectid(libro_id)
            filtro["libro_id"] = libro_id
        
        # Contar total
        total = await db.rese√±as.count_documents(filtro)
        
        # Aplicar paginaci√≥n
        skip = (pagina - 1) * por_pagina
        
        cursor = db.rese√±as.find(filtro).sort("fecha_rese√±a", DESCENDING).skip(skip).limit(por_pagina)
        rese√±as_raw = await cursor.to_list(length=por_pagina)
        
        # Obtener informaci√≥n relacionada y formatear fechas
        rese√±as = []
        for rese√±a in rese√±as_raw:
            # Obtener informaci√≥n del libro
            libro_object_id = str_to_objectid(rese√±a["libro_id"])
            libro = await db.libros.find_one({"_id": libro_object_id})
            
            # Obtener informaci√≥n del usuario
            usuario_object_id = str_to_objectid(rese√±a["usuario_id"])
            usuario = await db.usuarios.find_one({"_id": usuario_object_id})
            
            rese√±a["_id"] = str(rese√±a["_id"])
            rese√±a["fecha_rese√±a"] = str(rese√±a["fecha_rese√±a"])
            rese√±a["libro_titulo"] = libro["titulo"] if libro else "Libro eliminado"
            rese√±a["usuario_nombre"] = usuario["nombre"] if usuario else "Usuario eliminado"
            
            rese√±as.append(Rese√±aResponse(**rese√±a))
        
        total_paginas = (total + por_pagina - 1) // por_pagina
        
        return PaginatedRese√±asResponse(
            rese√±as=rese√±as,
            total=total,
            pagina=pagina,
            por_pagina=por_pagina,
            total_paginas=total_paginas
        )
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al obtener rese√±as: {e}")
        raise HTTPException(status_code=500, detail=f"Error al obtener rese√±as: {e}")

# READ - Obtener rese√±a por ID
@app.get("/rese√±as/{rese√±a_id}", response_model=Rese√±aResponse, tags=["Rese√±as"])
async def obtener_rese√±a(rese√±a_id: str):
    try:
        object_id = str_to_objectid(rese√±a_id)
        
        rese√±a = await db.rese√±as.find_one({"_id": object_id})
        if not rese√±a:
            raise HTTPException(status_code=404, detail="Rese√±a no encontrada")
        
        # Obtener informaci√≥n relacionada
        libro_object_id = str_to_objectid(rese√±a["libro_id"])
        libro = await db.libros.find_one({"_id": libro_object_id})
        
        usuario_object_id = str_to_objectid(rese√±a["usuario_id"])
        usuario = await db.usuarios.find_one({"_id": usuario_object_id})
        
        rese√±a["_id"] = str(rese√±a["_id"])
        rese√±a["fecha_rese√±a"] = str(rese√±a["fecha_rese√±a"])
        rese√±a["libro_titulo"] = libro["titulo"] if libro else "Libro eliminado"
        rese√±a["usuario_nombre"] = usuario["nombre"] if usuario else "Usuario eliminado"
        
        return Rese√±aResponse(**rese√±a)
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al obtener rese√±a: {e}")
        raise HTTPException(status_code=500, detail=f"Error al obtener rese√±a: {e}")

# UPDATE - Editar rese√±a por ID
@app.put("/rese√±as/{rese√±a_id}", response_model=Rese√±aResponse, tags=["Rese√±as"])
async def editar_rese√±a(rese√±a_id: str, rese√±a_actualizada: Rese√±aUpdate):
    try:
        object_id = str_to_objectid(rese√±a_id)
        
        # Verificar que la rese√±a existe
        rese√±a_existente = await db.rese√±as.find_one({"_id": object_id})
        if not rese√±a_existente:
            raise HTTPException(status_code=404, detail="Rese√±a no encontrada")
        
        # Construir actualizaci√≥n
        actualizacion = {}
        
        if rese√±a_actualizada.calificacion is not None:
            actualizacion["calificacion"] = rese√±a_actualizada.calificacion
        
        if rese√±a_actualizada.comentario is not None:
            actualizacion["comentario"] = rese√±a_actualizada.comentario
        
        if not actualizacion:
            raise HTTPException(status_code=400, detail="No se proporcionaron campos v√°lidos para actualizar")
        
        # Ejecutar actualizaci√≥n
        resultado = await db.rese√±as.update_one(
            {"_id": object_id},
            {"$set": actualizacion}
        )
        
        if resultado.matched_count == 0:
            raise HTTPException(status_code=404, detail="Rese√±a no encontrada para actualizar")
        
        # Obtener la rese√±a actualizada
        rese√±a_actualizada_result = await db.rese√±as.find_one({"_id": object_id})
        
        # Obtener informaci√≥n relacionada
        libro_object_id = str_to_objectid(rese√±a_actualizada_result["libro_id"])
        libro = await db.libros.find_one({"_id": libro_object_id})
        
        usuario_object_id = str_to_objectid(rese√±a_actualizada_result["usuario_id"])
        usuario = await db.usuarios.find_one({"_id": usuario_object_id})
        
        logger.info(f"Rese√±a actualizada exitosamente: ID {rese√±a_id}")
        
        rese√±a_actualizada_result["_id"] = str(rese√±a_actualizada_result["_id"])
        rese√±a_actualizada_result["fecha_rese√±a"] = str(rese√±a_actualizada_result["fecha_rese√±a"])
        rese√±a_actualizada_result["libro_titulo"] = libro["titulo"] if libro else "Libro eliminado"
        rese√±a_actualizada_result["usuario_nombre"] = usuario["nombre"] if usuario else "Usuario eliminado"
        
        return Rese√±aResponse(**rese√±a_actualizada_result)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al actualizar rese√±a: {e}")
        raise HTTPException(status_code=500, detail=f"Error al actualizar rese√±a: {e}")

# DELETE - Eliminar rese√±a por ID
@app.delete("/rese√±as/{rese√±a_id}", tags=["Rese√±as"])
async def eliminar_rese√±a(rese√±a_id: str):
    try:
        object_id = str_to_objectid(rese√±a_id)
        
        # Verificar que la rese√±a existe
        rese√±a_existente = await db.rese√±as.find_one({"_id": object_id})
        if not rese√±a_existente:
            raise HTTPException(status_code=404, detail="Rese√±a no encontrada")
        
        # Obtener informaci√≥n para el log
        libro_object_id = str_to_objectid(rese√±a_existente["libro_id"])
        libro = await db.libros.find_one({"_id": libro_object_id})
        
        usuario_object_id = str_to_objectid(rese√±a_existente["usuario_id"])
        usuario = await db.usuarios.find_one({"_id": usuario_object_id})
        
        # Eliminar la rese√±a
        await db.rese√±as.delete_one({"_id": object_id})
        
        logger.info(f"Rese√±a eliminada: ID {rese√±a_id} - {rese√±a_existente['calificacion']}/5")
        
        return {
            "mensaje": "Rese√±a eliminada exitosamente",
            "rese√±a_eliminada": {
                "id": rese√±a_id,
                "libro_titulo": libro["titulo"] if libro else "Libro eliminado",
                "usuario_nombre": usuario["nombre"] if usuario else "Usuario eliminado",
                "calificacion": rese√±a_existente["calificacion"],
                "comentario": rese√±a_existente.get("comentario", "Sin comentario")
            }
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al eliminar rese√±a: {e}")
        raise HTTPException(status_code=500, detail=f"Error al eliminar rese√±a: {e}")

# READ - Obtener pr√©stamo por ID
@app.get("/prestamos/{prestamo_id}", response_model=PrestamoResponse, tags=["Pr√©stamos"])
async def obtener_prestamo(prestamo_id: str):
    try:
        object_id = str_to_objectid(prestamo_id)
        
        prestamo = await db.prestamos.find_one({"_id": object_id})
        if not prestamo:
            raise HTTPException(status_code=404, detail="Pr√©stamo no encontrado")
        
        # Obtener informaci√≥n relacionada
        libro_object_id = str_to_objectid(prestamo["libro_id"])
        libro = await db.libros.find_one({"_id": libro_object_id})
        
        usuario_object_id = str_to_objectid(prestamo["usuario_id"])
        usuario = await db.usuarios.find_one({"_id": usuario_object_id})
        
        prestamo["_id"] = str(prestamo["_id"])
        prestamo["fecha_prestamo"] = str(prestamo["fecha_prestamo"])
        prestamo["fecha_devolucion_real"] = str(prestamo["fecha_devolucion_real"]) if prestamo.get("fecha_devolucion_real") else None
        prestamo["libro_titulo"] = libro["titulo"] if libro else "Libro eliminado"
        prestamo["usuario_nombre"] = usuario["nombre"] if usuario else "Usuario eliminado"
        
        return PrestamoResponse(**prestamo)
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error al obtener pr√©stamo: {e}")
        raise HTTPException(status_code=500, detail=f"Error al obtener pr√©stamo: {e}")

# ESTAD√çSTICAS COMPLETAS
@app.get("/estadisticas/", response_model=Estadisticas, tags=["Estad√≠sticas"])
async def obtener_estadisticas():
    try:
        # Total de libros
        total_libros = await db.libros.count_documents({})
        
        # Total de usuarios
        total_usuarios = await db.usuarios.count_documents({})
        
        # Total de pr√©stamos
        total_prestamos = await db.prestamos.count_documents({})
        
        # Total de rese√±as
        total_rese√±as = await db.rese√±as.count_documents({})
        
        # Libros por g√©nero
        pipeline_genero = [
            {"$match": {"genero": {"$ne": None}}},
            {"$group": {"_id": "$genero", "cantidad": {"$sum": 1}}},
            {"$sort": {"cantidad": -1}}
        ]
        libros_por_genero_cursor = db.libros.aggregate(pipeline_genero)
        libros_por_genero = {doc["_id"]: doc["cantidad"] async for doc in libros_por_genero_cursor}
        
        # Libros por a√±o (√∫ltimos 10 a√±os)
        a√±o_actual = datetime.now().year
        pipeline_a√±o = [
            {"$match": {"a√±o": {"$gte": a√±o_actual - 10}}},
            {"$group": {"_id": "$a√±o", "cantidad": {"$sum": 1}}},
            {"$sort": {"_id": -1}}
        ]
        libros_por_a√±o_cursor = db.libros.aggregate(pipeline_a√±o)
        libros_por_a√±o = {str(doc["_id"]): doc["cantidad"] async for doc in libros_por_a√±o_cursor}
        
        # Usuarios por tipo
        pipeline_tipo = [
            {"$group": {"_id": "$tipo_usuario", "cantidad": {"$sum": 1}}},
            {"$sort": {"cantidad": -1}}
        ]
        usuarios_por_tipo_cursor = db.usuarios.aggregate(pipeline_tipo)
        usuarios_por_tipo = {doc["_id"]: doc["cantidad"] async for doc in usuarios_por_tipo_cursor}
        
        # Pr√©stamos activos
        prestamos_activos = await db.prestamos.count_documents({"estado": "activo"})
        
        # Pr√©stamos vencidos (activos pero con fecha vencida)
        fecha_actual = datetime.now().date()
        prestamos_vencidos = await db.prestamos.count_documents({
            "estado": "activo", 
            "fecha_devolucion_esperada": {"$lt": fecha_actual.isoformat()}
        })
        
        # Promedio de calificaciones
        pipeline_promedio = [
            {"$group": {"_id": None, "promedio": {"$avg": "$calificacion"}}}
        ]
        promedio_cursor = db.rese√±as.aggregate(pipeline_promedio)
        promedio_result = None
        async for doc in promedio_cursor:
            promedio_result = doc["promedio"]
            break
        promedio_calificaciones = float(promedio_result) if promedio_result else 0.0
        
        # Autores √∫nicos
        autores_unicos = len(await db.libros.distinct("autor"))
        
        # G√©neros √∫nicos
        generos_unicos = len(await db.libros.distinct("genero", {"genero": {"$ne": None}}))
        
        return Estadisticas(
            total_libros=total_libros,
            total_usuarios=total_usuarios,
            total_prestamos=total_prestamos,
            total_rese√±as=total_rese√±as,
            libros_por_genero=libros_por_genero,
            libros_por_a√±o=libros_por_a√±o,
            usuarios_por_tipo=usuarios_por_tipo,
            prestamos_activos=prestamos_activos,
            prestamos_vencidos=prestamos_vencidos,
            promedio_calificaciones=round(promedio_calificaciones, 2),
            autores_unicos=autores_unicos,
            generos_unicos=generos_unicos
        )
    except Exception as e:
        logger.error(f"Error al obtener estad√≠sticas: {e}")
        raise HTTPException(status_code=500, detail=f"Error al obtener estad√≠sticas: {e}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)